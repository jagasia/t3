https://docs.aws.amazon.com/eks/latest/userguide/eksctl.html

If you do not already have Chocolatey installed on your Windows system, 
	see Installing Chocolatey. (https://chocolatey.org/install)

Install or upgrade eksctl .

Install the binaries with the following command:	(open cmd as administration************)

	choco install -y eksctl 
If they are already installed, run the following command to upgrade:

	choco upgrade -y eksctl 
Test that your installation was successful with the following command.

	eksctl version



Goto this url after logging into aws management console:
	https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html

for setting env var for getting ekctl access with aws

to create a cluster:
-----------------
	eksctl create cluster --name test-cluster --version 1.17 --region eu-central-1 --nodegroup-name linux-nodes --node-type t2.micro --nodes 2


-----------------------
https://www.youtube.com/watch?v=p6xDCz00TxU&t=505s

also

https://docs.aws.amazon.com/eks/latest/userguide/getting-started-eksctl.html

-------------
delete cluster node syntax
	eksctl delete cluster --name my-cluster --region us-west-2

	eksctl delete cluster --name test-cluster --region eu-central-1

========================deploying docker app in eks cluster========================
https://blog.ruanbekker.com/blog/2019/11/17/how-to-deploy-a-webapp-on-a-aws-eks-kubernetes-cluster/



1) $ cat deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-hostname-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
        - name: my-app-container
          image: ruanbekker/hostname
          ports:
          - name: http
            containerPort: 8000


2) $ cat service.yml
apiVersion: v1
kind: Service
metadata:
  name: my-hostname-app-service
  labels:
    app: my-app
spec:
  ports:
  - port: 80
    targetPort: 8000
  selector:
    app: my-app
  type: LoadBalancer


3) $ kubectl apply -f deployment.yml
deployment.apps/my-hostname-app created


4) $ kubectl apply -f service.yml
service/my-hostname-app-service created


5) $ kubectl get deployments
NAME              READY   UP-TO-DATE   AVAILABLE   AGE
my-hostname-app   3/3     3            3           4m38s


6) $ kubectl get pods
NAME                               READY   STATUS    RESTARTS   AGE
my-hostname-app-5dcd48dfc5-2j8zm   1/1     Running   0          24s
my-hostname-app-5dcd48dfc5-58vkc   1/1     Running   0          24s
my-hostname-app-5dcd48dfc5-cmjwj   1/1     Running   0          24s


7) $ kubectl get service --selector app=my-app
NAME                      TYPE           CLUSTER-IP       EXTERNAL-IP                                                              PORT(S)        AGE
my-hostname-app-service   LoadBalancer   10.100.114.166   a460661ce089b11ea97cd06dd7513db6-669054126.eu-west-1.elb.amazonaws.com   80:30648/TCP   2m29s


8) $ curl -i http://a460661ce089b11ea97cd06dd7513db6-669054126.eu-west-1.elb.amazonaws.com
HTTP/1.1 200 OK
Date: Sat, 16 Nov 2019 18:05:27 GMT
Content-Length: 43
Content-Type: text/plain; charset=utf-8

Hostname: my-hostname-app-5dcd48dfc5-2j8zm


***************	IF EXTERNAL IP IS pending for long, use
	minikube tunnel





setx AWS_ACCESS_KEY_ID AKIAIOSFODNN7EXAMPLE
setx AWS_SECRET_ACCESS_KEY wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
setx AWS_DEFAULT_REGION eu-central-1